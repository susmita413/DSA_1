#include <iostream>
using namespace std;

class LL{
    class node{
    public:
        string data;
        node* next;
        node(string data){
            this->data=data;
            this->next= nullptr;
        }
    };
    node* head;
public:
    LL(){
        this->head= nullptr;
    }
    void Add(string data){
        node* NewNode = new node(data);
        if(head==nullptr){
            head=NewNode;
            head->next=head;
            return;
        }

        node* currentNode =head;
        while (currentNode->next!= head){
            currentNode=currentNode->next;
        }
        currentNode->next=NewNode;
        NewNode->next=head;
    }

    bool DetectLoop(){
        if(head== nullptr){
            return false;
        }

        node* point1 = head;
        node* point2 = head;
        while(point1!= nullptr && point1->next!=nullptr){
            point2 = point2->next;
            point1 = point1->next->next;
            if(point2==point1){
                return true;
            }
        }
        return false;
    }

    void PrintList() {
        if(head==nullptr){
            cout<<"Empty List";
            return;
        }

        node* currentNode=head;
        do{
            cout<<currentNode->data;
            if(currentNode->next!= head){
                cout<<"->";
            }
            currentNode=currentNode->next;
        }
        while(currentNode!= head);

        cout<<endl;
    }
};

int main(){
    LL list;
    list.Add("12");
    list.Add("4");
    list.Add("3");
    list.Add("2");
    list.Add("1");


    list.PrintList();

    if (list.DetectLoop()) {
        cout << "True" << endl;
    } else {
        cout << "False" << endl;
    }

    return 0;
}